//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GiellyGreen_Team1Entities : DbContext
    {
        public GiellyGreen_Team1Entities()
            : base("name=GiellyGreen_Team1Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Supplier> Suppliers { get; set; }
    
        public virtual ObjectResult<GetSuppliers_Result> GetSuppliers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSuppliers_Result>("GetSuppliers");
        }
    
        public virtual int ChangeIsActive(Nullable<int> id, Nullable<bool> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeIsActive", idParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<InsertUpdateSupplier_Result> InsertUpdateSupplier(Nullable<int> id, string supplierName, string supplierReference, string businessAddress, string emailAddress, string phoneNumber, string companyRegisterNumber, string vATNumber, string taxReference, string companyRegisterAddress, string logo, Nullable<bool> isactive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var supplierReferenceParameter = supplierReference != null ?
                new ObjectParameter("SupplierReference", supplierReference) :
                new ObjectParameter("SupplierReference", typeof(string));
    
            var businessAddressParameter = businessAddress != null ?
                new ObjectParameter("BusinessAddress", businessAddress) :
                new ObjectParameter("BusinessAddress", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var companyRegisterNumberParameter = companyRegisterNumber != null ?
                new ObjectParameter("CompanyRegisterNumber", companyRegisterNumber) :
                new ObjectParameter("CompanyRegisterNumber", typeof(string));
    
            var vATNumberParameter = vATNumber != null ?
                new ObjectParameter("VATNumber", vATNumber) :
                new ObjectParameter("VATNumber", typeof(string));
    
            var taxReferenceParameter = taxReference != null ?
                new ObjectParameter("TaxReference", taxReference) :
                new ObjectParameter("TaxReference", typeof(string));
    
            var companyRegisterAddressParameter = companyRegisterAddress != null ?
                new ObjectParameter("CompanyRegisterAddress", companyRegisterAddress) :
                new ObjectParameter("CompanyRegisterAddress", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("logo", logo) :
                new ObjectParameter("logo", typeof(string));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("Isactive", isactive) :
                new ObjectParameter("Isactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSupplier_Result>("InsertUpdateSupplier", idParameter, supplierNameParameter, supplierReferenceParameter, businessAddressParameter, emailAddressParameter, phoneNumberParameter, companyRegisterNumberParameter, vATNumberParameter, taxReferenceParameter, companyRegisterAddressParameter, logoParameter, isactiveParameter);
        }
    
        public virtual ObjectResult<DeleteSupplier_Result> DeleteSupplier(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteSupplier_Result>("DeleteSupplier", idParameter);
        }
    }
}
